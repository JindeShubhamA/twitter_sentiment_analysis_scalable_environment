apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: spark-driver
      name: spark-driver
    spec:
      ports:
        - name: "30001"
          port: 30001
          targetPort: 30001
        - name: "30002"
          port: 30002
          targetPort: 30002
      selector:
        io.kompose.service: spark-driver
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: spark-leader
      name: spark-leader
    spec:
      ports:
        - name: "8080"
          port: 8080
          targetPort: 8080
        - name: "7077"
          port: 7077
          targetPort: 7077
      selector:
        io.kompose.service: spark-leader
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: spark-driver
      name: spark-driver
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: spark-driver
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.network/spark-communication: "true"
            io.kompose.service: spark-driver
        spec:
          containers:
            - image: docker.io/richardswesterhof/mapreduce:latest
              name: spark-driver
              ports:
                - containerPort: 30001
                - containerPort: 30002
              resources: {}
          hostname: spark-driver
          restartPolicy: Always
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: spark-communication
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/spark-communication: "true"
      podSelector:
        matchLabels:
          io.kompose.network/spark-communication: "true"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: spark-leader
      name: spark-leader
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: spark-leader
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.network/spark-communication: "true"
            io.kompose.service: spark-leader
        spec:
          containers:
            - env:
                - name: SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED
                  value: "no"
                - name: SPARK_MODE
                  value: master
                - name: SPARK_RPC_AUTHENTICATION_ENABLED
                  value: "no"
                - name: SPARK_RPC_ENCRYPTION_ENABLED
                  value: "no"
                - name: SPARK_SSL_ENABLED
                  value: "no"
              image: docker.io/bitnami/spark:latest
              name: spark-leader
              ports:
                - containerPort: 8080
                - containerPort: 7077
              resources: {}
          hostname: spark-leader
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: spark-worker
      name: spark-worker
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: spark-worker
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: ./tools/kompose convert -o ./kubernetes/spark-kube-config.yml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.network/spark-communication: "true"
            io.kompose.service: spark-worker
        spec:
          containers:
            - env:
                - name: SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED
                  value: "no"
                - name: SPARK_MASTER_URL
                  value: spark://spark-leader:7077
                - name: SPARK_MODE
                  value: worker
                - name: SPARK_RPC_AUTHENTICATION_ENABLED
                  value: "no"
                - name: SPARK_RPC_ENCRYPTION_ENABLED
                  value: "no"
                - name: SPARK_SSL_ENABLED
                  value: "no"
                - name: SPARK_WORKER_CORES
                  value: "1"
                - name: SPARK_WORKER_MEMORY
                  value: 1G
              image: docker.io/bitnami/spark:latest
              name: spark-worker
              resources: {}
          restartPolicy: Always
    status: {}
kind: List
metadata: {}

